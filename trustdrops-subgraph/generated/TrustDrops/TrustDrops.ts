// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get candidate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokensClaimed extends ethereum.Event {
  get params(): TokensClaimed__Params {
    return new TokensClaimed__Params(this);
  }
}

export class TokensClaimed__Params {
  _event: TokensClaimed;

  constructor(event: TokensClaimed) {
    this._event = event;
  }

  get candidate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get candidate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TrustDrops extends ethereum.SmartContract {
  static bind(address: Address): TrustDrops {
    return new TrustDrops("TrustDrops", address);
  }

  DISTRIBUTION_DENOMINATOR(): BigInt {
    let result = super.call(
      "DISTRIBUTION_DENOMINATOR",
      "DISTRIBUTION_DENOMINATOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DISTRIBUTION_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DISTRIBUTION_DENOMINATOR",
      "DISTRIBUTION_DENOMINATOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DISTRIBUTION_INTERVAL(): BigInt {
    let result = super.call(
      "DISTRIBUTION_INTERVAL",
      "DISTRIBUTION_INTERVAL():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DISTRIBUTION_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DISTRIBUTION_INTERVAL",
      "DISTRIBUTION_INTERVAL():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOGIN_AIRDROP_AMOUNT(): BigInt {
    let result = super.call(
      "LOGIN_AIRDROP_AMOUNT",
      "LOGIN_AIRDROP_AMOUNT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LOGIN_AIRDROP_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LOGIN_AIRDROP_AMOUNT",
      "LOGIN_AIRDROP_AMOUNT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alreadyLoggedIn(param0: Address): boolean {
    let result = super.call(
      "alreadyLoggedIn",
      "alreadyLoggedIn(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_alreadyLoggedIn(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "alreadyLoggedIn",
      "alreadyLoggedIn(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  alreadyVerified(param0: BigInt): boolean {
    let result = super.call(
      "alreadyVerified",
      "alreadyVerified(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_alreadyVerified(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "alreadyVerified",
      "alreadyVerified(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  anonAadhaarVerifierAddr(): Address {
    let result = super.call(
      "anonAadhaarVerifierAddr",
      "anonAadhaarVerifierAddr():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_anonAadhaarVerifierAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "anonAadhaarVerifierAddr",
      "anonAadhaarVerifierAddr():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateIndividualAllocation(candidate: Address): BigInt {
    let result = super.call(
      "calculateIndividualAllocation",
      "calculateIndividualAllocation(address):(uint256)",
      [ethereum.Value.fromAddress(candidate)],
    );

    return result[0].toBigInt();
  }

  try_calculateIndividualAllocation(
    candidate: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateIndividualAllocation",
      "calculateIndividualAllocation(address):(uint256)",
      [ethereum.Value.fromAddress(candidate)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastClaimTime(param0: Address): BigInt {
    let result = super.call(
      "lastClaimTime",
      "lastClaimTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_lastClaimTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClaimTime",
      "lastClaimTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mandToken(): Address {
    let result = super.call("mandToken", "mandToken():(address)", []);

    return result[0].toAddress();
  }

  try_mandToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("mandToken", "mandToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reputation(param0: Address): BigInt {
    let result = super.call("reputation", "reputation(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_reputation(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reputation", "reputation(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakes(param0: Address, param1: Address): BigInt {
    let result = super.call("stakes", "stakes(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBigInt();
  }

  try_stakes(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakes", "stakes(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReputation(): BigInt {
    let result = super.call(
      "totalReputation",
      "totalReputation():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalReputation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReputation",
      "totalReputation():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedByUser(param0: Address): BigInt {
    let result = super.call(
      "totalStakedByUser",
      "totalStakedByUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_totalStakedByUser(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedByUser",
      "totalStakedByUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _mandTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _anonAadhaarVerifierAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class VerifyAadhaarCall extends ethereum.Call {
  get inputs(): VerifyAadhaarCall__Inputs {
    return new VerifyAadhaarCall__Inputs(this);
  }

  get outputs(): VerifyAadhaarCall__Outputs {
    return new VerifyAadhaarCall__Outputs(this);
  }
}

export class VerifyAadhaarCall__Inputs {
  _call: VerifyAadhaarCall;

  constructor(call: VerifyAadhaarCall) {
    this._call = call;
  }

  get _pA(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _pB(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }

  get _pC(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _pubSignals(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class VerifyAadhaarCall__Outputs {
  _call: VerifyAadhaarCall;

  constructor(call: VerifyAadhaarCall) {
    this._call = call;
  }
}
